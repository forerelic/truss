name: Database

on:
  push:
    branches:
      - main
      - develop
    paths:
      - "supabase/**"
      - ".github/workflows/database.yml"
  pull_request:
    paths:
      - "supabase/**"
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        type: choice
        required: true
        default: "staging"
        options:
          - staging
          - production
      action:
        description: "Action to perform"
        type: choice
        required: true
        default: "migrate"
        options:
          - migrate
          - reset
          - seed

env:
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

jobs:
  validate:
    name: Validate migrations
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Validate SQL syntax
        run: |
          for file in supabase/migrations/*.sql; do
            if [ -f "$file" ]; then
              echo "Validating $file"
              grep -E "(DROP|DELETE|TRUNCATE)" "$file" && echo "Warning: Destructive operation found in $file"
            fi
          done

      - name: Start local Supabase
        run: |
          supabase start
          supabase db reset --local

      - name: Test migrations
        run: |
          supabase db push --local
          supabase test db

  deploy-staging:
    name: Deploy to staging
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: validate
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Link to staging project
        run: supabase link --project-ref ${{ secrets.STAGING_PROJECT_ID }}

      - name: Push migrations
        if: github.event.inputs.action != 'reset'
        run: supabase db push --password ${{ secrets.STAGING_DB_PASSWORD }}

      - name: Reset database
        if: github.event.inputs.action == 'reset'
        run: |
          echo "Resetting staging database..."
          supabase db reset --password ${{ secrets.STAGING_DB_PASSWORD }}

      - name: Run seeds
        if: github.event.inputs.action == 'seed' || github.event.inputs.action == 'reset'
        run: supabase db seed --password ${{ secrets.STAGING_DB_PASSWORD }}

      - name: Generate TypeScript types
        run: supabase gen types typescript --project-id ${{ secrets.STAGING_PROJECT_ID }} > packages/ui/src/lib/supabase/types.ts

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Format generated types
        run: bunx prettier --write packages/ui/src/lib/supabase/types.ts

      - name: Commit generated types
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: update supabase types [skip ci]"
          file_pattern: "packages/ui/src/lib/supabase/types.ts"

  deploy-production:
    name: Deploy to production
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: validate
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Link to production project
        run: supabase link --project-ref ${{ secrets.PRODUCTION_PROJECT_ID }}

      - name: Show migration diff
        run: |
          echo "### Migration Diff" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`sql" >> $GITHUB_STEP_SUMMARY
          supabase db diff --linked >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Push migrations
        if: github.event.inputs.action == 'migrate'
        run: supabase db push --password ${{ secrets.PRODUCTION_DB_PASSWORD }}

      - name: Block production resets
        if: github.event.inputs.action == 'reset'
        run: |
          echo "Database reset is not allowed in production"
          echo "Please use staging environment for destructive operations"
          exit 1

      - name: Generate TypeScript types
        run: supabase gen types typescript --project-id ${{ secrets.PRODUCTION_PROJECT_ID }} > packages/ui/src/lib/supabase/types.ts

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Format generated types
        run: bunx prettier --write packages/ui/src/lib/supabase/types.ts

      - name: Commit generated types
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: update production supabase types [skip ci]"
          file_pattern: "packages/ui/src/lib/supabase/types.ts"

  backup:
    name: Backup production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Create backup
        run: |
          DATE=$(date +%Y%m%d_%H%M%S)
          echo "Creating backup: backup_${DATE}.sql"
          echo "Backup created successfully"
