name: üñ•Ô∏è Release Desktop Apps

on:
  push:
    tags:
      - "precision-v*"
      - "momentum-v*"
  workflow_dispatch:
    inputs:
      app:
        description: "App to release"
        type: choice
        required: true
        options:
          - precision
          - momentum
      version:
        description: "Version (e.g., 1.0.0)"
        required: true

permissions:
  contents: write

jobs:
  # ==============================================
  # Build Desktop Apps
  # ==============================================
  build:
    name: üèóÔ∏è Build ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            target: "universal-apple-darwin"
            name: "macOS"
          - platform: "ubuntu-22.04"
            target: "x86_64-unknown-linux-gnu"
            name: "Linux"
          - platform: "windows-latest"
            target: "x86_64-pc-windows-msvc"
            name: "Windows"

    runs-on: ${{ matrix.platform }}
    timeout-minutes: 60

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üß∞ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: üîß Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: üóÑÔ∏è Rust Cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./apps/${{ github.event.inputs.app || (contains(github.ref, 'precision') && 'precision' || 'momentum') }}/src-tauri -> target"

      - name: üîß Install System Dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libssl-dev

      - name: üì¶ Install Dependencies
        run: bun install --frozen-lockfile

      - name: üîë Import Apple Certificates
        if: matrix.platform == 'macos-latest' && env.APPLE_CERTIFICATE
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)

          echo -n "$APPLE_CERTIFICATE" | base64 --decode -o $CERTIFICATE_PATH

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$APPLE_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: üèóÔ∏è Build Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PUBLIC_KEY: ${{ secrets.TAURI_SIGNING_PUBLIC_KEY }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          VITE_BETTER_AUTH_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
          VITE_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        with:
          projectPath: apps/${{ github.event.inputs.app || (contains(github.ref, 'precision') && 'precision' || 'momentum') }}
          tagName: ${{ github.ref_name }}
          releaseName: ${{ github.event.inputs.app || (contains(github.ref, 'precision') && 'Precision' || 'Momentum') }} v${{ github.event.inputs.version || github.ref_name }}
          releaseBody: |
            See the full changelog at [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/apps/${{ github.event.inputs.app || (contains(github.ref, 'precision') && 'precision' || 'momentum') }}/CHANGELOG.md)

            ## Installation

            - **macOS**: Download the `.dmg` file and drag to Applications
            - **Windows**: Download the `.exe` or `.msi` installer
            - **Linux**: Download the `.AppImage`, `.deb`, or `.rpm` package

            ## Verification

            All releases are signed. You can verify signatures using the public key available in our repository.
          releaseDraft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
          includeUpdaterJson: true

  # ==============================================
  # Update Homebrew Formula (macOS)
  # ==============================================
  homebrew:
    name: üç∫ Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: build
    if: success() && !contains(github.ref_name, 'beta') && !contains(github.ref_name, 'alpha')

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üç∫ Update Homebrew Formula
        env:
          HOMEBREW_GITHUB_TOKEN: ${{ secrets.HOMEBREW_GITHUB_TOKEN }}
        run: |
          echo "Homebrew formula update would go here"
          # brew bump-formula-pr --url=... --sha256=...

  # ==============================================
  # Announce Release
  # ==============================================
  announce:
    name: üì£ Announce Release
    runs-on: ubuntu-latest
    needs: build
    if: success()

    steps:
      - name: üì¢ Send Discord Notification
        if: env.DISCORD_WEBHOOK
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -H "Content-Type: application/json" \
            -d "{\"content\": \"üöÄ New release: ${{ github.event.inputs.app || (contains(github.ref, 'precision') && 'Precision' || 'Momentum') }} ${{ github.ref_name }}\\n\\nDownload: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}\"}" \
            $DISCORD_WEBHOOK

      - name: üê¶ Tweet Release
        if: env.TWITTER_API_KEY
        env:
          TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
        run: |
          echo "Twitter announcement would go here"