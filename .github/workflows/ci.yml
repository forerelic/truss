name: 🚀 Continuous Integration

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}
  NODE_ENV: test

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ==============================================
  # Quality Gate
  # ==============================================
  quality:
    name: 🎯 Quality Gate
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🧰 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: 📦 Install Dependencies
        run: bun install --frozen-lockfile

      - name: 🔍 Lint
        run: bun run lint

      - name: 🎨 Format Check
        run: bun run format:check

      - name: 🔎 Type Check
        run: bun run check-types

  # ==============================================
  # Test
  # ==============================================
  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality

    strategy:
      matrix:
        shard: [1, 2]
        total-shards: [2]

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🧰 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: 📦 Install Dependencies
        run: bun install --frozen-lockfile

      - name: 🧪 Run Tests (Shard ${{ matrix.shard }}/${{ matrix.total-shards }})
        run: bun test --shard=${{ matrix.shard }}/${{ matrix.total-shards }}

      - name: 📊 Upload Coverage
        if: always()
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unit-tests
          fail_ci_if_error: false

  # ==============================================
  # Build
  # ==============================================
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: quality

    strategy:
      matrix:
        app: [web, precision, momentum]

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🧰 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: 🔧 Setup Rust
        if: matrix.app != 'web'
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: 📦 Install Dependencies
        run: bun install --frozen-lockfile

      - name: 🏗️ Build ${{ matrix.app }}
        run: bun run build:${{ matrix.app }}
        env:
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
          VITE_BETTER_AUTH_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}

      - name: 📤 Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.app }}-build
          path: |
            apps/${{ matrix.app }}/dist
            apps/${{ matrix.app }}/.next
          retention-days: 7

  # ==============================================
  # Security
  # ==============================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🛡️ Run Security Audit
        run: bun audit

      - name: 🔍 Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.pull_request.base.sha }}
          head: ${{ github.event.pull_request.head.sha }}

  # ==============================================
  # Success Gate
  # ==============================================
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [quality, test, build]
    if: always()

    steps:
      - name: 🎉 All Checks Passed
        if: ${{ !(contains(needs.*.result, 'failure')) }}
        run: |
          echo "✅ All CI checks passed successfully!"
          exit 0

      - name: ❌ Some Checks Failed
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          echo "❌ Some CI checks failed. Please review the logs."
          exit 1
